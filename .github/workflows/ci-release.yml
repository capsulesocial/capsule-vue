name: Node CI
on:
  release:
    types: [published]
env:
  GITHUB_USER: dgrisham
  GITHUB_TOKEN: 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

jobs:

  install-dependencies:
    runs-on: ubuntu-latest
    container:
      image: node:16-alpine
    steps:

      - uses: actions/checkout@v1

      - name: install git
        run: apk add --no-cache git

      - name: yarn install
        run: yarn install

      # this copy of node_modules will be used for the rest of the workflow
      - name: compress node_modules
        run: tar -czf node_modules.tar.gz node_modules
      - uses: actions/upload-artifact@v2
        with:
          name: node_modules.tar.gz
          path: node_modules.tar.gz

  lint:
    needs: install-dependencies
    runs-on: ubuntu-latest
    container:
      image: node:16-alpine
    steps:

      - uses: actions/checkout@v1

      - uses: actions/download-artifact@v2
        with:
          name: node_modules.tar.gz
      - name: extract node_modules
        run: tar -xzf node_modules.tar.gz

      - name: lint
        run: yarn lint

  release:
    needs: lint
    runs-on: ubuntu-latest
    container:
      image: node:16-alpine
    if: github.event_name == 'release' && github.event.action == 'published'
    steps:

      - uses: actions/checkout@v1

      - name: install git
        run: apk add --no-cache git

      - name: Set DEPLOY_ENV + DEPLOY_TARGET in github env
        run: |
          tag="$(echo ${GITHUB_REF#refs/tags/})"

          if [[ "$tag" =~ ^v[0-9]+\.[0-9]+\.[0-9]+-beta$ ]]; then # production
              deploy_env='release'
              deploy_target='beta'

              cat <<EOF >.env
                CONTRACT_NAME="capsule-beta.testnet"
                DOMAIN="https://blogchain.app"
                CAPSULE_SERVER="https://blogchain.app/server"
                ORBIT_URL="https://node1.blogchain.app"
                TORUS_GOOGLE_VERIFIER="blogchain-app-production"
                TORUS_GOOGLE_CLIENTID="367906518235-1gh9efo0518u43fnaj3qfgob64fv1o8p.apps.googleusercontent.com"
                TORUS_DISCORD_VERIFIER="blogchain-app-discord-production"
                TORUS_DISCORD_CLIENTID="947888768269033512"
                TORUS_NETWORK=mainnet
          EOF
          elif [[ "$tag" =~ ^*-alpha$ ]]; then # development
              deploy_env='development'
              deploy_target='alpha'

              cat <<EOF >.env
                CONTRACT_NAME="dev-1635323648697-81373157539648"
                DOMAIN="https://alpha.capsule.social"
                CAPSULE_SERVER="https://alpha.capsule.social/server"
                ORBIT_URL="https://alpha.capsule.social/orbit"
                TORUS_GOOGLE_VERIFIER="capsule-social-google-chris"
                TORUS_GOOGLE_CLIENTID="653379121360-j8t9ua763vfvd86d1qjguonhrgqvkigo.apps.googleusercontent.com"
                TORUS_DISCORD_VERIFIER="capsule-social-test-v2-discord"
                TORUS_DISCORD_CLIENTID="906210984396468275"
          EOF
          else
              echo "Unsupported tag '$tag', skipping release and deploy jobs" >&2
              exit 1
          fi
          echo "DEPLOY_ENV=$deploy_env"       >> $GITHUB_ENV
          echo "DEPLOY_TARGET=$deploy_target" >> $GITHUB_ENV

      - name: Set COMMIT_TAG in Github environment
        run: echo "COMMIT_TAG=$(echo ${GITHUB_REF#refs/tags/})" >> $GITHUB_ENV

      - name: Set COMMIT_SHORT_SHA in Github environment
        run: echo "COMMIT_SHORT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - uses: actions/download-artifact@v2
        with:
          name: node_modules.tar.gz
      - name: extract node_modules
        run: tar -xzf node_modules.tar.gz

      - name: build
        run: yarn build:web

      - name: Compress capsule-vue static site
        run: |
          [[ -d .app ]] || { echo "Missing .app, exiting" >&2 ; exit 1 ; }
          build_name="capsule_vue-$DEPLOY_ENV-$COMMIT_TAG-$COMMIT_SHORT_SHA"
          mv .app $build_name
          tar -czvf "${build_name}.tar.gz" "$build_name"
          echo "BUILD_NAME=$build_name" >> $GITHUB_ENV
        env:
          DEPLOY_ENV:       ${{ env.DEPLOY_ENV }}
          COMMIT_TAG:       ${{ env.COMMIT_TAG }}
          COMMIT_SHORT_SHA: ${{ env.COMMIT_SHORT_SHA }}

      - name: Upload build as release asset
        uses: ncipollo/release-action@v1
        with:
          artifacts:    ${{ env.BUILD_NAME }}.tar.gz
          token:        ${{ secrets.GITHUB_TOKEN }}
          allowUpdates: true

  deploy:
    needs: release
    runs-on: ubuntu-latest
    container:
      image: lexauw/ansible-alpine:latest
    if: github.event_name == 'release' && github.event.action == 'published'
    steps:

      - uses: actions/checkout@v1

      - name: install bash
        run: apk add --no-cache bash

      - name: Set DEPLOY_ENV + DEPLOY_TARGET in github env
        run: |
          tag="$(echo ${GITHUB_REF#refs/tags/})"
          if [[ "$tag" =~ ^v[0-9]+\.[0-9]+\.[0-9]+-beta$ ]]; then # production
              deploy_env='release'
              deploy_target='beta'
          elif [[ "$tag" =~ ^*-alpha$ ]]; then # development
              deploy_env='development'
              deploy_target='alpha'
          else
              echo "Unsupported tag '$tag', skipping release and deploy jobs" >&2
              exit 1
          fi
          echo "DEPLOY_ENV=$deploy_env"       >> $GITHUB_ENV
          echo "DEPLOY_TARGET=$deploy_target" >> $GITHUB_ENV
        shell: bash

      - name: Set COMMIT_TAG in Github environment
        run: echo "COMMIT_TAG=$(echo ${GITHUB_REF#refs/tags/})" >> $GITHUB_ENV

      - name: Set COMMIT_SHORT_SHA in Github environment
        run: echo "COMMIT_SHORT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Deploy updated images
        run: ./.github/scripts/deploy.sh
        env:
          DEPLOY_TARGET:       ${{ env.DEPLOY_TARGET }}
          DEPLOY_ENV:          ${{ env.DEPLOY_ENV }}
          COMMIT_TAG:          ${{ env.COMMIT_TAG }}
          COMMIT_SHORT_SHA:    ${{ env.COMMIT_SHORT_SHA }}
          GITHUB_USER:         ${{ env.GITHUB_USER }}
          GITHUB_TOKEN:        ${{ env.GITHUB_TOKEN }}
          ANSIBLE_PRIVATE_KEY: ${{ secrets.ANSIBLE_PRIVATE_KEY }}
