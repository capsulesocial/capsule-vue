name: Node CI
on:
  push:
  release:
    types: [published]
env:
  GITHUB_USER: dgrisham
  GITHUB_TOKEN: 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

jobs:

  install-dependencies:
    runs-on: ubuntu-latest
    container:
      image: node:16-alpine
    steps:

      - uses: actions/checkout@v1

      - name: install git
        run: apk add --no-cache git

      - name: yarn install
        run: yarn install

      # this copy of node_modules will be used for the rest of the workflow
      - name: compress node_modules
        run: tar -czf node_modules.tar.gz node_modules
      - uses: actions/upload-artifact@v2
        with:
          name: node_modules.tar.gz
          path: node_modules.tar.gz

  lint:
    needs: install-dependencies
    runs-on: ubuntu-latest
    container:
      image: node:16-alpine
    steps:

      - uses: actions/checkout@v1

      - uses: actions/download-artifact@v2
        with:
          name: node_modules.tar.gz
      - name: extract node_modules
        run: tar -xzf node_modules.tar.gz

      - name: lint
        run: yarn lint

  build:
    needs: install-dependencies
    runs-on: ubuntu-latest
    container:
      image: node:16-alpine
    steps:

      - uses: actions/checkout@v1

      - uses: actions/download-artifact@v2
        with:
          name: node_modules.tar.gz
      - name: extract node_modules
        run: tar -xzf node_modules.tar.gz

      - name: build
        run: yarn build:web

  release:
    needs: [lint, build]
    runs-on: ubuntu-latest
    if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || (github.event_name == 'release' && github.event.action == 'published')
    steps:

      - uses: actions/checkout@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to Github container registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ env.GITHUB_USER }}
          password: ${{ env.GITHUB_TOKEN }}

      - uses: actions/download-artifact@v2
        with:
          name: node_modules.tar.gz
      - name: extract node_modules
        run: tar -xzf node_modules.tar.gz

      - name: Set up .env
        run: |
          cat <<EOF >.env
            CONTRACT_NAME="dev-1635323648697-81373157539648"
            DOMAIN="https://alpha-c.capsule.social"
            CAPSULE_SERVER="https://alpha-c.capsule.social/server"
            ORBIT_URL="https://alpha-c.capsule.social/orbit"
            TORUS_GOOGLE_VERIFIER="capsule-social-google-chris"
            TORUS_GOOGLE_CLIENTID="653379121360-j8t9ua763vfvd86d1qjguonhrgqvkigo.apps.googleusercontent.com"
            TORUS_DISCORD_VERIFIER="capsule-social-test-v2-discord"
            TORUS_DISCORD_CLIENTID="906210984396468275"
          EOF

      - name: Set DEPLOY_BRANCH in env
        run: |
          branch=''
          if [[ "${{ github.event_name }}" == 'push' && "$GITHUB_REF" == 'refs/heads/main' ]]; then
              branch='main'
          elif [[ "${{ github.event_name }}" == 'release' && "${{ github.event.action }}" == 'published' ]]; then
              # NOTE: 'DEPLOY_BRANCH' is a bad name for this. But Ansible needs a common
              # reference for all releases so that it knows which config to use (and tags
              # aren't tied to a specific branch)
              branch='release'
          fi
          [[ -z "$branch" ]] && { echo "Failed to set deploy branch" >&2 ; exit 1 ; }
          echo "DEPLOY_BRANCH=$branch" >> $GITHUB_ENV

      - name: Set COMMIT_SHORT_SHA in env
        run: |
          commit_identifier=''
          if [[ "${{ github.event_name }}" == 'push' && "$GITHUB_REF" == 'refs/heads/main' ]]; then
              commit_identifier=$(git rev-parse --short HEAD)
          elif [[ "${{ github.event_name }}" == 'release' && "${{ github.event.action }}" == 'published' ]]; then
              # for releases, this is the version number followed by the short sha -- e.g. v0.11.0-alpha-a1b2c3d4
              commit_identifier="$(echo ${GITHUB_REF#refs/tags/})-$(git rev-parse --short HEAD)"
          fi
          [[ -z "$commit_identifier" ]] && { echo "Failed to set commit identifier" >&2 ; exit 1 ; }
          echo "COMMIT_SHORT_SHA=$commit_identifier" >> $GITHUB_ENV

      - name: Build and push capsule-vue image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile.prod
          push: true
          tags: |
            ghcr.io/capsulesocial/capsule-vue:${{ env.DEPLOY_BRANCH }}-latest
            ghcr.io/capsulesocial/capsule-vue:${{ env.DEPLOY_BRANCH }}-${{ env.COMMIT_SHORT_SHA }}

  deploy:
    needs: release
    runs-on: ubuntu-latest
    container:
      image: lexauw/ansible-alpine:latest
    if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || (github.event_name == 'release' && github.event.action == 'published')
    steps:

      - uses: actions/checkout@v1

      - name: Set DEPLOY_BRANCH in env
        run: |
          branch=''
          if [[ "${{ github.event_name }}" == 'push' && "$GITHUB_REF" == 'refs/heads/main' ]]; then
              branch='main'
          elif [[ "${{ github.event_name }}" == 'release' && "${{ github.event.action }}" == 'published' ]]; then
              # NOTE: 'DEPLOY_BRANCH' is a bad name for this. But Ansible needs a common
              # reference for all releases so that it knows which config to use (and tags
              # aren't tied to a specific branch)
              branch='release'
          fi
          [[ -z "$branch" ]] && { echo "Failed to set deploy branch" >&2 ; exit 1 ; }
          echo "DEPLOY_BRANCH=$branch" >> $GITHUB_ENV

      - name: Set COMMIT_SHORT_SHA in env
        run: |
          commit_identifier=''
          if [[ "${{ github.event_name }}" == 'push' && "$GITHUB_REF" == 'refs/heads/main' ]]; then
              commit_identifier=$(git rev-parse --short HEAD)
          elif [[ "${{ github.event_name }}" == 'release' && "${{ github.event.action }}" == 'published' ]]; then
              # for releases, this is the version number followed by the short sha -- e.g. v0.11.0-alpha-a1b2c3d4
              commit_identifier="$(echo ${GITHUB_REF#refs/tags/})-$(git rev-parse --short HEAD)"
          fi
          [[ -z "$commit_identifier" ]] && { echo "Failed to set commit identifier" >&2 ; exit 1 ; }
          echo "COMMIT_SHORT_SHA=$commit_identifier" >> $GITHUB_ENV

      - name: Deploy updated images
        run: ./.github/scripts/deploy.sh
        env:
          DEPLOY_BRANCH:       ${{ env.DEPLOY_BRANCH }}
          COMMIT_SHORT_SHA:    ${{ env.COMMIT_SHORT_SHA }}
          GITHUB_USER:         ${{ env.GITHUB_USER }}
          GITHUB_TOKEN:        ${{ env.GITHUB_TOKEN }}
          ANSIBLE_PRIVATE_KEY: ${{ secrets.ANSIBLE_PRIVATE_KEY }}
